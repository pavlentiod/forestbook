from typing import List
from uuid import UUID
from fastapi import HTTPException
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession

from src.repositories.subscription.subscription_repository import SubscriptionRepository
from src.schemas.subscription.subscrption_schema import (
    SubscriptionPlanCreate,
    SubscriptionPlanUpdate,
    SubscriptionPlanBase,
    SubscribeRequest,
    UserSubscriptionOut
)


class SubscriptionService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ —Ç–∞—Ä–∏—Ñ–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏:
    –ø–æ–ª—É—á–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ç.–¥.
    """

    def __init__(self, session: AsyncSession):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫.

        :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        self.repository = SubscriptionRepository(session)

    # --- üîì –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---

    async def get_all_plans(self) -> List[SubscriptionPlanBase]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.

        :return: –°–ø–∏—Å–æ–∫ SubscriptionPlanBase
        """
        return await self.repository.get_all_plans()

    async def get_user_active_subscription(self, user_id: UUID) -> UserSubscriptionOut:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param user_id: UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        :raises HTTPException: –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        """
        sub = await self.repository.get_user_active_subscription(user_id)
        if not sub:
            raise HTTPException(status_code=404, detail="–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return sub

    async def subscribe(self, user_id: UUID, data: SubscribeRequest) -> UserSubscriptionOut:
        """
        –ü–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω.

        :param user_id: UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param data: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
        :return: –°–æ–∑–¥–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        :raises HTTPException: –ï—Å–ª–∏ –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
        """
        plan = await self.repository.get_plan_by_id(data.plan_id)
        plan = SubscriptionPlanBase(**plan.__dict__)
        if not plan:
            raise HTTPException(status_code=404, detail="–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

        try:
            sub = await self.repository.create_subscription(user_id=user_id, data=data, plan=plan)
            return await self.get_user_active_subscription(user_id)
        except IntegrityError:
            raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")

    # --- üîê –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞–º–∏ ---

    async def create_plan(self, data: SubscriptionPlanCreate) -> SubscriptionPlanBase:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω.

        :param data: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
        :return: –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
        """
        return await self.repository.create_plan(data)

    async def update_plan(self, plan_id: UUID, data: SubscriptionPlanUpdate) -> SubscriptionPlanBase:
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω.

        :param plan_id: UUID –ø–ª–∞–Ω–∞
        :param data: –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        :return: –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–ª–∞–Ω
        :raises HTTPException: –ï—Å–ª–∏ –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        plan = await self.repository.get_plan_by_id(plan_id)
        if not plan:
            raise HTTPException(status_code=404, detail="–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return await self.repository.update_plan(plan, data)

    async def delete_plan(self, plan_id: UUID) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –ø–æ ID.

        :param plan_id: UUID –ø–ª–∞–Ω–∞
        :return: True, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        :raises HTTPException: –ï—Å–ª–∏ –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        plan = await self.repository.get_plan_by_id(plan_id)
        if not plan:
            raise HTTPException(status_code=404, detail="–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return await self.repository.delete_plan(plan)
