from datetime import datetime, timedelta, UTC
from typing import List, Optional, Sequence
from uuid import UUID

from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from src.database.models import SubscriptionPlan
from src.database.models.subscription.user_subscription import UserSubscription
from src.schemas.subscription.subscrption_schema import (
    SubscriptionPlanOutput,
    SubscriptionPlanInput,
    SubscriptionPlanUpdate,
    UserSubscriptionOutput,
    SubscribeRequest
)


class SubscriptionRepository:
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ —Ç–∞—Ä–∏—Ñ–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏.
    """

    def __init__(self, session: AsyncSession):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        :param session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy
        """
        self.session = session

    # -----------------------------
    # üì¶ –ú–µ—Ç–æ–¥—ã –¥–ª—è SubscriptionPlan
    # -----------------------------

    async def create_plan(self, data: SubscriptionPlanInput) -> SubscriptionPlanOutput:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.

        :param data: –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
        :return: –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
        """
        plan = SubscriptionPlan(**data.model_dump())
        self.session.add(plan)
        await self.session.commit()
        await self.session.refresh(plan)
        return SubscriptionPlanOutput(**plan.__dict__)

    async def get_all_plans(self) -> List[SubscriptionPlanOutput]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.

        :return: –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤
        """
        query = select(SubscriptionPlan).where(SubscriptionPlan.is_active.is_(True))
        result = await self.session.execute(query)
        plans = result.scalars().all()
        return [SubscriptionPlanOutput(**p.__dict__) for p in plans]

    async def get_plan_by_id(self, plan_id: UUID) -> Optional[SubscriptionPlan]:
        stmt = (
            select(SubscriptionPlan)
            .where(SubscriptionPlan.id == plan_id)
            .options(selectinload(SubscriptionPlan.subscriptions))  # –∑–∞–≥—Ä—É–∑–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        )
        result = await self.session.execute(stmt)
        return result.scalar_one_or_none()

    async def update_plan(self, plan: SubscriptionPlan, data: SubscriptionPlanUpdate) -> SubscriptionPlanOutput:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞–Ω–∞.

        :param plan: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∞
        :param data: –û–±–Ω–æ–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        :return: –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–ª–∞–Ω
        """
        for key, value in data.model_dump(exclude_none=True).items():
            setattr(plan, key, value)
        await self.session.commit()
        await self.session.refresh(plan)
        return SubscriptionPlanOutput(**plan.__dict__)

    async def delete_plan(self, plan: SubscriptionPlan) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.

        :param plan: –ü–ª–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        :return: True, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        await self.session.delete(plan)
        await self.session.commit()
        return True

    # --------------------------------
    # üë§ –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # --------------------------------

    async def get_user_active_subscription(self, user_id: UUID) -> Optional[UserSubscriptionOutput]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param user_id: UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –ü–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ None
        """
        now = datetime.now(UTC)

        query = (
            select(UserSubscription)
            .options(selectinload(UserSubscription.plan))  # ‚Üê –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            .where(
                and_(
                    UserSubscription.user_id == user_id,
                    UserSubscription.is_active.is_(True),
                    UserSubscription.start_date <= now,
                    UserSubscription.end_date >= now,
                )
            )
            .limit(1)
        )

        result = await self.session.execute(query)
        sub = result.scalars().first()

        if sub:
            return UserSubscriptionOutput(
                plan=SubscriptionPlanOutput.model_validate(sub.plan),  # ‚Üê –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
                start_date=sub.start_date,
                end_date=sub.end_date,
                is_active=sub.is_active,
            )

        return None

    async def create_subscription(
            self, user_id: UUID, data: SubscribeRequest, plan: SubscriptionPlanOutput
    ) -> UserSubscription:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param user_id: UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param data: –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        :param plan: –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω
        :return: –°–æ–∑–¥–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        """
        start = datetime.now(UTC)
        end = start + timedelta(days=plan.duration_days)
        sub = UserSubscription(
            user_id=user_id,
            plan_id=plan.id,
            start_date=start,
            end_date=end,
            is_active=True,
            external_id=data.external_id
        )
        self.session.add(sub)
        await self.session.commit()
        await self.session.refresh(sub)
        return sub

    async def get_user_subscriptions(self, user_id: UUID) -> Sequence[UserSubscription]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ).

        :param user_id: UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
        """
        query = select(UserSubscription).where(UserSubscription.user_id == user_id)
        result = await self.session.execute(query)
        return result.scalars().all()

    async def deactivate_subscription(self, subscription: UserSubscription) -> bool:
        """
        –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (soft-off).

        :param subscription: –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        :return: True, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        subscription.is_active = False
        await self.session.commit()
        return True

    async def delete_subscription(self, subscription: UserSubscription) -> bool:
        """
        –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.

        :param subscription: –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        :return: True, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        await self.session.delete(subscription)
        await self.session.commit()
        return True
